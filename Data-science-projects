{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [],
      "dockerImageVersionId": 30804,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "name": "Data science worksheet 02",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dattatrayamundhe/Data-science-projects/blob/main/Data-science-projects\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load\n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n",
        "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "id": "T3sgvUai2u2N"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Variables**\n",
        "\n",
        "Variables are names bounded to objects.\n",
        "\n",
        "Variable assignment : variable_name = value (e.g. A=5, s=345).\n",
        "\n",
        "Python is case sensitive so A=5 and a=5 both are different.\n",
        "\n",
        "Variable name cannot start with any special symbol (Except underscore _name = \"datta\" is valid but @name =\"datta\" is invalid).\n",
        "\n",
        "Variable name cannot start with number ( e.g. 5var = \"Motilal\" is invalid variable).\n"
      ],
      "metadata": {
        "id": "LFBdYdjW2u2V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Name = \"Mahesh Jadhav\"\n",
        "Age = 24\n",
        "print(f\"{Name} is an artist and he is {Age} years old.\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-29T06:22:44.719356Z",
          "iopub.execute_input": "2024-12-29T06:22:44.719718Z",
          "iopub.status.idle": "2024-12-29T06:22:44.749952Z",
          "shell.execute_reply.started": "2024-12-29T06:22:44.719678Z",
          "shell.execute_reply": "2024-12-29T06:22:44.748794Z"
        },
        "id": "eB49FtDn2u2Y"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Conditional statements**\n",
        "\n"
      ],
      "metadata": {
        "id": "p4Htp5o72u2Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "syntax = \"\"\"\n",
        "if (expression):\n",
        "        Statement#01\n",
        "\n",
        "elif (expression):\n",
        "        Statement#02\n",
        "\n",
        "else:\n",
        "        Statement#03\n",
        "\n",
        "\"\"\"\n",
        "print(syntax)\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-29T06:40:17.232873Z",
          "iopub.execute_input": "2024-12-29T06:40:17.233258Z",
          "iopub.status.idle": "2024-12-29T06:40:17.23913Z",
          "shell.execute_reply.started": "2024-12-29T06:40:17.233225Z",
          "shell.execute_reply": "2024-12-29T06:40:17.237963Z"
        },
        "id": "MqUPcYOf2u2Z"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Identify age category as Child, Teenager/Yougster, Adult, Senior Citizen\n",
        "\n",
        "Age = float(input(\"Enter your age : \"))\n",
        "\n",
        "if (Age>0 and Age<=12):\n",
        "    print(\"Your are a child so enjoy it!! \\n This stage includes infancy, early childhood, and preadolescence. It is marked by physical and cognitive development, learning foundational skills, and exploring the world.\")\n",
        "\n",
        "elif (Age>=13 and Age<=19):\n",
        "    print(\"You are youngster so focus on your study!! \\n This stage includes adolescence and the teenage years. It is characterized by puberty, emotional growth, identity formation, and increasing independence.\")\n",
        "\n",
        "elif (Age>=20 and Age<=59):\n",
        "    if (Age>=20 and Age<=39):\n",
        "        print(\"You are Young Adult!! \\n Early adulthood is focused on establishing a career, relationships, and possibly starting a family.\")\n",
        "    else:\n",
        "        print(\"Middle-Aged Adult!! \\n This period often includes career stability, family responsibilities, and self-reflection.\")\n",
        "else:\n",
        "    print(\"You are Old/Senior Citizen!! \\n This stage includes retirement and aging. It is a time for leisure, wisdom-sharing, and often managing health-related challenges.\")\n",
        "\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-29T06:56:55.991523Z",
          "iopub.execute_input": "2024-12-29T06:56:55.991958Z",
          "iopub.status.idle": "2024-12-29T06:57:04.115018Z",
          "shell.execute_reply.started": "2024-12-29T06:56:55.991923Z",
          "shell.execute_reply": "2024-12-29T06:57:04.113899Z"
        },
        "id": "IfyENjCW2u2b"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# WAP to identify the give number is \"Even\" or \"Odd\"\n",
        "\n",
        "n = int(input(\"Enter a Number : \"))\n",
        "\n",
        "if (n%2 == 0):\n",
        "    print(f\"{n} is Even Number.\")\n",
        "else:\n",
        "    print(f\"{n} is Odd Number.\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-29T07:02:13.134504Z",
          "iopub.execute_input": "2024-12-29T07:02:13.135346Z",
          "iopub.status.idle": "2024-12-29T07:02:18.777486Z",
          "shell.execute_reply.started": "2024-12-29T07:02:13.135305Z",
          "shell.execute_reply": "2024-12-29T07:02:18.776273Z"
        },
        "id": "Ss25jHBx2u2b"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "WAP to identify your grade where\n",
        "Grade A for above 90 percentage,\n",
        "Grade B for greater than 60 but less than 90,\n",
        "Grade C for 35-60 range student and\n",
        "Grade F for below 34 percentage.\n",
        "\"\"\"\n",
        "P = float(input(\"Enter your percentage : \"))\n",
        "\n",
        "if (P>90):\n",
        "    print(\"Grade A\")\n",
        "elif (P>60 and P<=90):\n",
        "    print(\"Grade B\")\n",
        "elif (P<=60 and P>=35):\n",
        "    print(\"Grade C\")\n",
        "else:\n",
        "    print(\"Grade F\")\n",
        "\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2024-12-29T07:13:05.991219Z",
          "iopub.execute_input": "2024-12-29T07:13:05.991627Z",
          "iopub.status.idle": "2024-12-29T07:13:21.029759Z",
          "shell.execute_reply.started": "2024-12-29T07:13:05.991569Z",
          "shell.execute_reply": "2024-12-29T07:13:21.028741Z"
        },
        "id": "WtdvffRK2u2c"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Understanding Looping Constructs**"
      ],
      "metadata": {
        "id": "KlaBggTp2u2d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#for loop\n",
        "for i in range(10): # it ranges from 0 to 9 exclude 10\n",
        "\n",
        "    print(i, \"- Jay Shri Ram\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-01-04T00:10:34.186616Z",
          "iopub.execute_input": "2025-01-04T00:10:34.187012Z",
          "iopub.status.idle": "2025-01-04T00:10:34.193881Z",
          "shell.execute_reply.started": "2025-01-04T00:10:34.186978Z",
          "shell.execute_reply": "2025-01-04T00:10:34.192395Z"
        },
        "id": "QxUgwjeO2u2e"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# WAP to print number between 3 to 30\n",
        "\n",
        "for n in range(4,30):\n",
        "    print(n)"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-01-04T00:15:31.437454Z",
          "iopub.execute_input": "2025-01-04T00:15:31.437821Z",
          "iopub.status.idle": "2025-01-04T00:15:31.443415Z",
          "shell.execute_reply.started": "2025-01-04T00:15:31.43779Z",
          "shell.execute_reply": "2025-01-04T00:15:31.442278Z"
        },
        "id": "L2kBJJ9-2u2e"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# WAP to print even number between 2 to 30\n",
        "\n",
        "for e in range(2,30,2):\n",
        "    print(e)"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-01-04T00:19:24.955094Z",
          "iopub.execute_input": "2025-01-04T00:19:24.955474Z",
          "iopub.status.idle": "2025-01-04T00:19:24.962149Z",
          "shell.execute_reply.started": "2025-01-04T00:19:24.955439Z",
          "shell.execute_reply": "2025-01-04T00:19:24.960876Z"
        },
        "id": "ErM7QNUv2u2f"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Understanding Functions**\n",
        "* **Printing \"Python is good\" for 100 times we can do by using** - **Loop**\n",
        "* But printing \"Ganoderma is good\" or \"Spirulina is good\" for 100 times is done by using - **Function**\n",
        "* **Function** - It is re-usable piece of code. Created for solving specific problem.\n",
        "* Functions are of two types :\n",
        "* 1. **Built in Function** - print(), range(), min(), max()\n",
        "  2. **User defined Function** - Area_of_circle()\n"
      ],
      "metadata": {
        "id": "MbI9vEjz2u2f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "Syntax :\n",
        "\n",
        "def function_name(Argument):\n",
        "    Statement 01\n",
        "    Statement 02\n",
        "\"\"\"\n",
        "\n",
        "# WAP to area of circle\n",
        "\n",
        "def Area_of_circle(radius):\n",
        "    Area = 3.14*radius*radius\n",
        "    return Area\n",
        "\n",
        "Area_of_circle(5.2)\n"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-01-04T00:48:54.57418Z",
          "iopub.execute_input": "2025-01-04T00:48:54.57461Z",
          "iopub.status.idle": "2025-01-04T00:48:54.5818Z",
          "shell.execute_reply.started": "2025-01-04T00:48:54.574573Z",
          "shell.execute_reply": "2025-01-04T00:48:54.580762Z"
        },
        "id": "uy6SGrV52u2g"
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}